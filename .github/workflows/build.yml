name: Build, Test, and Deploy
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20' 
  BUILD_DIR: '/var/www/abangbakso'

jobs:

  test:
    name: Install & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.4

      - name: Set up Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci 

      - name: Run Update Snapshot
        run: npm run test:update

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4.3.3
        with:
          name: coverage
          path: coverage
          retention-days: 1

  quality:
    needs: test
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    outputs:
      quality_gate_passed: ${{ steps.quality_gate.outputs.quality_gate_passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.4

      - name: Download coverage
        uses: actions/download-artifact@v4.1.7
        with:
          name: coverage
          path: coverage

      - name: SonarQube analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=Stradivary_bakso-app
            -Dsonar.organization=stradivary
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions=**/*.test.js,**/*.test.jsx,**/*.test.ts,**/*.test.tsx
            -Dsonar.coverage.exclusions=**/*.test.js,**/*.test.jsx,**/*.test.ts,**/*.test.tsx

      - name: Check Quality Gate
        id: quality_gate
        run: |
          TIMEOUT=300  # 5 minutes timeout
          START_TIME=$(date +%s)
          
          while true; do
            CURRENT_TIME=$(date +%s)
            if [ $((CURRENT_TIME - START_TIME)) -gt $TIMEOUT ]; then
              echo "Timeout waiting for Quality Gate"
              echo "quality_gate_passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            RESPONSE=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
              "https://sonarcloud.io/api/qualitygates/project_status?projectKey=Stradivary_bakso-app")
            
            STATUS=$(echo $RESPONSE | jq -r '.projectStatus.status')
            
            if [ "$STATUS" = "OK" ]; then
              echo "Quality Gate passed"
              echo "quality_gate_passed=true" >> $GITHUB_OUTPUT
              exit 0
            elif [ "$STATUS" = "ERROR" ]; then
              echo "Quality Gate failed"
              echo "quality_gate_passed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            echo "Quality Gate status is pending... waiting"
            sleep 10
          done


  build:
    needs: test
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.4

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set environment variables for build
        run: |
          echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}" >> .env.production.local
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}" >> .env.production.local
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4.3.3
        with:
          name: dist
          path: dist
          retention-days: 1

  deploy:
    needs: build
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only deploy on main branch
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.4

      - name: Download build artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: dist
          path: dist

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy.key
          chmod 600 ~/.ssh/deploy.key
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          
          cat > ~/.ssh/config << EOF
          Host biznet
            HostName ${{ secrets.SERVER_HOST }}
            User ${{ secrets.SERVER_USER }}
            IdentityFile ~/.ssh/deploy.key
            StrictHostKeyChecking yes
            ServerAliveInterval 60
            ServerAliveCountMax 3
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Verify SSH connection
        run: ssh biznet 'echo "SSH connection successful"'

      - name: Deploy application
        run: |
          ssh biznet "
            sudo mkdir -p ${BUILD_DIR}
            sudo chown -R ${SERVER_USER}:www-data ${BUILD_DIR}
            sudo chmod -R 775 ${BUILD_DIR}
          "
          rsync -azP --delete ./dist/ biznet:${BUILD_DIR}/ --rsync-path="sudo rsync"
        env:
          BUILD_DIR: /var/www/abangbakso
          SERVER_USER: ${{ secrets.SERVER_USER }}

      - name: Verify deployment
        run: curl -f -s "http://${{ secrets.DOMAIN_NAME }}" || exit 1

      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/deploy.key